<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-11-11T13:19:47.081Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>c语言小结（二）</title>
    <link href="http://example.com/2021/11/11/c%E8%AF%AD%E8%A8%80%E5%B0%8F%E7%BB%93%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://example.com/2021/11/11/c%E8%AF%AD%E8%A8%80%E5%B0%8F%E7%BB%93%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2021-11-11T13:18:17.000Z</published>
    <updated>2021-11-11T13:19:47.081Z</updated>
    
    <content type="html"><![CDATA[<p>C的运算符有以下几种：</p><p>　　1、算术运算符（+ - * /  %）结合方向自左向右</p><p>　　2、关系运算符（&gt; &lt; == &gt;= &lt;= !=）</p><p>　　3、逻辑运算符(! &amp;&amp; ||)</p><p>　　4、位运算符(&lt;&lt; &gt;&gt; ~ | ^ &amp;)</p><p>　　5、赋值运算符(=及符号扩展赋值运算符)</p><p>　　6、条件运算符(? : )</p><p>　　7、逗号运算符( , )</p><p>　　8、指针运算符（* &amp;）</p><p>　　9、求字节运算符（sizeof）</p><p>　　10、强制类型转换运算符((类型))</p><p>　　11、分量运算符( . -&gt;)</p><p>　　12、下标运算符([])</p><p>　　13、其他</p><p>控制语句：</p><p>　　完成一定的控制功能。</p><p>　　1、if()<del>else</del></p><p>　　2、for()~</p><p>　　3、while()~</p><p>　　4、do~while()</p><p>　　5、continue</p><p>　　6、break</p><p>　　7、switch</p><p>　　8、goto</p><p>　　9、return</p><p>字符数据的输入输出：</p><p>　　1、putchar（）输入字符变量</p><p>　　2、getchar（）只能接受一个字符</p><p>格式输入输出：</p><p>　　1、printf（%d—整型，%c—字符型，%ld，%md，%o，%u，%s，%-m.nf，%e，%g）</p><p>　　2、scanf（格式控制，地址列表）</p><p>数组</p><p>　　一维数组的定义：类型说明符 数组名【常量表达式】；先定义后引用；一维数组初始化时可以只对一部分元素初始化，在对全部数组元素初始化的时候可以部规定长度；但是若被定义的数组长度与提供的初始值不一样时，则数组长度不能省略。</p><p>　　二维数组的定义：类型说明符 数组名【常量表达式】【常量表达式】C语言中存放二维数组是先存放第一行的元素，紧接着是第二行，其实也是以一维的方式存放。如果初始化时能指定所有元素的初始值，第一维大小可以省略，但是第二维不能省略。</p><p>　　字符数组：定义和初始化跟数组差不多，只是需要加单引号。字符和字符串结束标志，C语言规定，以‘\0’代表。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;C的运算符有以下几种：&lt;/p&gt;
&lt;p&gt;　　1、算术运算符（+ - * /  %）结合方向自左向右&lt;/p&gt;
&lt;p&gt;　　2、关系运算符（&amp;gt; &amp;lt; == &amp;gt;= &amp;lt;= !=）&lt;/p&gt;
&lt;p&gt;　　3、逻辑运算符(! &amp;amp;&amp;amp; ||)&lt;/p&gt;
&lt;p&gt;　</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>c语言小结（一）</title>
    <link href="http://example.com/2021/11/04/c%E8%AF%AD%E8%A8%80%E5%B0%8F%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://example.com/2021/11/04/c%E8%AF%AD%E8%A8%80%E5%B0%8F%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2021-11-04T11:43:57.000Z</published>
    <updated>2021-11-04T11:46:36.044Z</updated>
    
    <content type="html"><![CDATA[<p>算法结构：</p><pre><code>    1、顺序结构、选择结构、循环结构；    2、循环结构又分为while型、do-while型、for循环结构；    3、程序流程图；</code></pre><p>结构化程序设计方法：</p><pre><code>    1、自顶向下；    2、逐步细化；    3、模块化设计；    4、结构化编码。</code></pre><p>数据类型：</p><p>　　常量：常量包括字面常量、直接常量和符号常量；</p><p>　　变量：C语言规定标志符只能由字母、数字和下划线三种字符组成，且第一个字符必须是字母或者下划线；必须压迫先定义后使用；每一个变量被定义以确定类型后，在编译时就能为其分配相应的存储单元；</p><p>　　整数类型：整数常量有十进制、八进制和十六进制；“%d”</p><p>　　整形变量：数据在内存中存放形式是以二进制形式存放；有int型、short int型和long int型，无符号整型变量的范围是-32768—32767，有符号型为0~65535.通常把long定义为32位，把short定义为16位，int可以是32位也可以为16位，这都主要取决于机器字长。</p><p>　　实型常量的表示方法：</p><pre><code>    （1）十进制，0.0；    （2）指数形式，123e3</code></pre><p>　　实型变量：实数型数据在内存中的存放形式，一般在内存中占4个字节，分成整数部分和小数部分存放。实型变量分为float型、double型long double型。实型数据会存在舍入误差。</p><p>　　实型常量的类型：C编译系统将实型常量作为双精度来处理。</p><p>　　字符型数组：</p><pre><code>    （一）字符常量：转义字符（\n——换行，\t——tab,\r——回车，\f——换页，\b——退格，\ddd——1到3位8进制的数代表的字符）    （二）字符变量：字符数据存储形式实际是以ASCII码存储。“%c”</code></pre><p>　　字符串常量：双撇号括起来的一系列字符序列。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;算法结构：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    1、顺序结构、选择结构、循环结构；

    2、循环结构又分为while型、do-while型、for循环结构；

    3、程序流程图；
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;结构化程序设计方法：&lt;/p&gt;
&lt;pre&gt;&lt;co</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>c语言中的for循环</title>
    <link href="http://example.com/2021/10/31/c%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84for%E5%BE%AA%E7%8E%AF/"/>
    <id>http://example.com/2021/10/31/c%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84for%E5%BE%AA%E7%8E%AF/</id>
    <published>2021-10-31T15:13:47.000Z</published>
    <updated>2021-10-31T15:21:51.047Z</updated>
    
    <content type="html"><![CDATA[<p>除了while循环，C语言中还有 for 循环，它的使用更加灵活，完全可以取代 while 循环。</p><p>上节我们使用 while 循环来计算1加到100的值，代码如下：<br>#include &lt;stdio.h&gt;<br>int main(){<br>    int i, sum=0;<br>    i = 1;  //语句①<br>    while(i&lt;=100 /*语句②*/ ){<br>        sum+=i;<br>        i++;  //语句③<br>    }<br>    printf(“%d\n”,sum);<br>    return 0;<br>}<br>可以看到，语句①②③被放到了不同的地方，代码结构较为松散。为了让程序更加紧凑，可以使用 for 循环来代替，如下所示：<br>#include &lt;stdio.h&gt;<br>int main(){<br>    int i, sum=0;<br>    for(i=1/<em>语句①</em>/; i&lt;=100/<em>语句②</em>/; i++/<em>语句③</em>/){<br>        sum+=i;<br>    }<br>    printf(“%d\n”,sum);<br>    return 0;<br>}<br>在 for 循环中，语句①②③被集中到了一起，代码结构一目了然。</p><p>for 循环的一般形式为：<br>for(表达式1; 表达式2; 表达式3){<br>    语句块<br>}</p><p>它的运行过程为：</p><ol><li><p>先执行“表达式1”。</p></li><li><p>再执行“表达式2”，如果它的值为真（非0），则执行循环体，否则结束循环。</p></li><li><p>执行完循环体后再执行“表达式3”。</p></li><li><p>重复执行步骤 2) 和 3)，直到“表达式2”的值为假，就结束循环。</p></li></ol><p>上面的步骤中，2) 和 3) 是一次循环，会重复执行，for 语句的主要作用就是不断执行步骤 2) 和 3)。</p><p>“表达式1”仅在第一次循环时执行，以后都不会再执行，可以认为这是一个初始化语句。“表达式2”一般是一个关系表达式，决定了是否还要继续下次循环，称为“循环条件”。“表达式3”很多情况下是一个带有自增或自减操作的表达式，以使循环条件逐渐变得“不成立”。</p><p>for循环的执行过程可用下图表示：</p><p>我们再来分析一下“计算从1加到100的和”的代码：<br>#include &lt;stdio.h&gt;<br>int main(){<br>    int i, sum=0;<br>    for(i=1; i&lt;=100; i++){<br>        sum+=i;<br>    }<br>    printf(“%d\n”,sum);<br>    return 0;<br>}<br>运行结果：<br>5050</p><p>代码分析：</p><ol><li><p>执行到 for 语句时，先给 i 赋初值1，判断 i&lt;=100 是否成立；因为此时 i=1，i&lt;=100 成立，所以执行循环体。循环体执行结束后（sum的值为1），再计算 i++。</p></li><li><p>第二次循环时，i 的值为2，i&lt;=100 成立，继续执行循环体。循环体执行结束后（sum的值为3），再计算 i++。</p></li><li><p>重复执行步骤 2)，直到第101次循环，此时 i 的值为101，i&lt;=100 不成立，所以结束循环。</p></li></ol><p>由此我们可以总结出for循环的一般形式：<br>for(初始化语句; 循环条件; 自增或自减){<br>    语句块<br>}<br><img src="https://s3.bmp.ovh/imgs/2021/10/ddd79898cb6fe1f3.jpg" alt="eihei"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;除了while循环，C语言中还有 for 循环，它的使用更加灵活，完全可以取代 while 循环。&lt;/p&gt;
&lt;p&gt;上节我们使用 while 循环来计算1加到100的值，代码如下：&lt;br&gt;#include &amp;lt;stdio.h&amp;gt;&lt;br&gt;int main(){&lt;br&gt; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL基本查询语句</title>
    <link href="http://example.com/2021/10/25/MySQL%E5%9F%BA%E6%9C%AC%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/"/>
    <id>http://example.com/2021/10/25/MySQL%E5%9F%BA%E6%9C%AC%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/</id>
    <published>2021-10-25T13:26:10.000Z</published>
    <updated>2021-10-25T13:26:46.024Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL基本查询语句<br>1、查看当前使用的是哪个数据库</p><p>mysql&gt; select database();</p><p>另外，在下面2个语句的输出里也能看出当前库是哪一个</p><p>mysql&gt; show tables;</p><p>mysql&gt; status;</p><p>2、查看MySQL版本和状态</p><p>mysql&gt; select VERSION();</p><p>mysql&gt; status;</p><p>3、查看MySQL实例的当前状态（参数形式）</p><p>mysql&gt; show status;</p><p>4、查看MySQL实例的参数</p><p>mysql&gt; show variables;</p><p>查看最大连接数</p><p>mysql&gt; show variables like ‘%max_connections%’;</p><p>5、查看MySQL实例当前的进程</p><p>mysql&gt; show processlist;</p><p>6、查询所有数据</p><p>select * from Info 查所有数据</p><p>select Code,Name from Info 查特定列</p><p>7、根据条件查</p><p>select * from Info where Code=’p001’ 一个条件查询 </p><p>select * from Info where Code=’p001’ and Natio n=’n001’ 多条件 并关系 查询</p><p>select * from Info where Name=’胡军’ or Nation=’n001’ 多条件 或关系 查询</p><p>select * from Car where Price&gt;=50 and Price&lt;=60 范围查询</p><p>select * from Car where Price between 50 and 60 范围查询</p><p>8、模糊查询</p><p>select * from Car where Name like ‘%型’ %通配符代表任意多个字符</p><p>select * from Car where Name like ‘%奥迪%’</p><p>select * from Car where Name like ‘_马%’ _通配符代表任意一个字符</p><p>9、排序</p><p>select * from Car order by Price asc 按照价格升序排列</p><p>select * from Car order by Price desc 按照价格降序排列</p><p>select * from Car order by Price,Oil 按照两列进行排序，前面的为主要的</p><p>10、统计函数（聚合函数）</p><p>select count(Code) from Car 查询表中有多少条数据</p><p>select max(Price) from Car 取价格的最大值</p><p>select min(Price) from Car 取价格的最小值</p><p>select sum(Price) from Car 取价格的总和</p><p>select avg(Price) from Car 取价格的平均值</p><p>11、分组查询</p><p>select Brand from Car group by Brand having count(*)&gt;2 查询所有系列中数量大于2的</p><p>12、分页查询</p><p>select * from Car limit 0,5 跳过几条数据取几条数据</p><p>13、去重查询</p><p>select distinct Brand from Car</p><p>14、查询建库、建表语句</p><p>mysql&gt; show create database dbname;</p><p>指定库后才能查询建表语句</p><p>mysql&gt; show create table tablename;</p><p>15、查询指定表的字段属性</p><p>mysql&gt; show full columns from tablename;</p><p>或者</p><p>mysql&gt; show full fields from tablename;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;MySQL基本查询语句&lt;br&gt;1、查看当前使用的是哪个数据库&lt;/p&gt;
&lt;p&gt;mysql&amp;gt; select database();&lt;/p&gt;
&lt;p&gt;另外，在下面2个语句的输出里也能看出当前库是哪一个&lt;/p&gt;
&lt;p&gt;mysql&amp;gt; show tables;&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>sql注入思路及一般步骤</title>
    <link href="http://example.com/2021/10/25/sql%E6%B3%A8%E5%85%A5%E6%80%9D%E8%B7%AF%E5%8F%8A%E4%B8%80%E8%88%AC%E6%AD%A5%E9%AA%A4/"/>
    <id>http://example.com/2021/10/25/sql%E6%B3%A8%E5%85%A5%E6%80%9D%E8%B7%AF%E5%8F%8A%E4%B8%80%E8%88%AC%E6%AD%A5%E9%AA%A4/</id>
    <published>2021-10-25T13:24:32.000Z</published>
    <updated>2021-10-25T13:28:18.572Z</updated>
    
    <content type="html"><![CDATA[<p> Step1正常输入<br> Step2判断是否存在SQL注入漏洞<br>一般来说我们先进行单引号测试，若服务器返回错误，显然并未对单引号作过滤的处理，判断存在SQL注入漏洞<br> Step3判断注入的类型<br>判断注入为数字型还是字符型，一般来说我们考虑这种分类方式<br>   尝试数字型：<br>   尝试字符型：<br> Step4尝试通过SQL注入查询出用户名与密码等敏感信息</p><p>1)获取当前数据库名<br>2)获取数据库表名<br>3)获取表中的列名<br>4获取password信息</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; Step1正常输入&lt;br&gt; Step2判断是否存在SQL注入漏洞&lt;br&gt;一般来说我们先进行单引号测试，若服务器返回错误，显然并未对单引号作过滤的处理，判断存在SQL注入漏洞&lt;br&gt; Step3判断注入的类型&lt;br&gt;判断注入为数字型还是字符型，一般来说我们考虑这种分类方式&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于html</title>
    <link href="http://example.com/2021/10/21/%E5%85%B3%E4%BA%8Ehtml/"/>
    <id>http://example.com/2021/10/21/%E5%85%B3%E4%BA%8Ehtml/</id>
    <published>2021-10-21T15:11:37.000Z</published>
    <updated>2021-10-21T15:19:45.076Z</updated>
    
    <content type="html"><![CDATA[<pre><code>                       什么是HTML</code></pre><p>HTML 不是一门编程语言，而是一种用于定义内容结构的标记语言。HTML 由一系列的元素（elements）组成，这些元素可以用来包围不同部分的内容，使其以某种方式呈现或者工作。<br>                                HEML元素详解<br><img src="https://s3.bmp.ovh/imgs/2021/10/b6bb2f92ba73435d.png" alt="eihei"><br>开始标签（Opening tag）：包含元素的名称（本例为 p），被大于号、小于号所包围。表示元素从这里开始或者开始起作用 —— 在本例中即段落由此开始。<br>结束标签（Closing tag）：与开始标签相似，只是其在元素名之前包含了一个斜杠。这表示着元素的结尾 —— 在本例中即段落在此结束。初学者常常会犯忘记包含结束标签的错误，这可能会产生一些奇怪的结果。<br>内容（Content）：元素的内容，本例中就是所输入的文本本身。<br>元素（Element）：开始标签、结束标签与内容相结合，便是一个完整的元素。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;pre&gt;&lt;code&gt;                       什么是HTML
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;HTML 不是一门编程语言，而是一种用于定义内容结构的标记语言。HTML 由一系列的元素（elements）组成，这些元素可以用来包围不同部分的内容，使其以某种方</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>test3</title>
    <link href="http://example.com/2021/10/16/test3/"/>
    <id>http://example.com/2021/10/16/test3/</id>
    <published>2021-10-15T16:26:56.702Z</published>
    <updated>2021-09-18T03:00:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>—what could be more romantic than that<br>date: 2021-09-18 10:59:03<br>tags:</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;—what could be more romantic than that&lt;br&gt;date: 2021-09-18 10:59:03&lt;br&gt;tags:&lt;/p&gt;
&lt;hr&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>test2</title>
    <link href="http://example.com/2021/10/16/test2/"/>
    <id>http://example.com/2021/10/16/test2/</id>
    <published>2021-10-15T16:26:56.697Z</published>
    <updated>2021-09-18T02:46:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="I-LOVE-YOUR"><a href="#I-LOVE-YOUR" class="headerlink" title="I LOVE YOUR"></a>I LOVE YOUR</h2><p>date: 2021-09-18 10:46:00<br>tags:</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;I-LOVE-YOUR&quot;&gt;&lt;a href=&quot;#I-LOVE-YOUR&quot; class=&quot;headerlink&quot; title=&quot;I LOVE YOUR&quot;&gt;&lt;/a&gt;I LOVE YOUR&lt;/h2&gt;&lt;p&gt;date: 2021-09-18 10:46:00&lt;br&gt;tags:</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/10/16/hello-world/"/>
    <id>http://example.com/2021/10/16/hello-world/</id>
    <published>2021-10-15T16:26:56.695Z</published>
    <updated>2021-09-18T02:06:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CTF中pwn的入门指南</title>
    <link href="http://example.com/2021/09/27/CTF%E4%B8%ADpwn%E7%9A%84%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://example.com/2021/09/27/CTF%E4%B8%ADpwn%E7%9A%84%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</id>
    <published>2021-09-27T03:14:35.000Z</published>
    <updated>2021-09-27T03:41:46.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>                          基础知识准备：</code></pre><p>c语言<br>汇编语言<br>python<br>操作系统<br>linux操作<br>  （<img src="https://s3.bmp.ovh/imgs/2021/09/1a66c2b3779a6ce7.jpg">）</p><pre><code>                              主流工具的使用：</code></pre><p>IDA pro  静态分析神器，必备。<br>ollydbg  动态分析使用，分析程序的流程。<br>windbg  windows下的动态分析神器，可以调试内核态，谨慎使用。<br>gdb  linux下的调试程序，同样作用很大。<br>pwntools  python第三方库，用于开发exp。<br>pwndbg  gdb调试的一个插件，可以显示一些调试信息很有用。<br>                                    学习网站推荐：<br>看雪论坛 <a href="https://bbs.pediy.com/">https://bbs.pediy.com</a><br>学破解论坛 <a href="https://www.xuepojie.com/">https://www.xuepojie.com</a><br>吾爱破解 <a href="https://www.52pojie.cn/">https://www.52pojie.cn</a><br>i春秋 <a href="https://www.ichunqiu.com/">https://www.ichunqiu.com</a><br>实验吧 <a href="http://www.shiyanbar.com/">http://www.shiyanbar.com</a><br>漏洞银行 <a href="https://www.bugbank.cn/live">https://www.bugbank.cn/live</a><br><img src="https://s3.bmp.ovh/imgs/2021/09/001fb0fedd2ca002.jpg" alt="eihei"></p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;pre&gt;&lt;code&gt;                          基础知识准备：
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;c语言&lt;br&gt;汇编语言&lt;br&gt;python&lt;br&gt;操作系统&lt;br&gt;linux操作&lt;br&gt;  （&lt;img src=&quot;https://s3.bmp.ovh/im</summary>
      
    
    
    
    
    <category term="ctf" scheme="http://example.com/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>text4</title>
    <link href="http://example.com/2021/09/19/text4/"/>
    <id>http://example.com/2021/09/19/text4/</id>
    <published>2021-09-19T03:50:53.000Z</published>
    <updated>2021-09-19T04:15:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>海贼</p><span id="more"></span><p><img src="https://s3.bmp.ovh/imgs/2021/09/5f2061f855ae7d3e.jpeg" alt="海贼王yyds"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;海贼&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
